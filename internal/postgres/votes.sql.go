// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: votes.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const insertVoteComment = `-- name: InsertVoteComment :exec
INSERT INTO votes (
    account_id, comment_id, value
) VALUES (
  $1, $2, $3
)
`

type InsertVoteCommentParams struct {
	AccountID uuid.UUID
	CommentID pgtype.UUID
	Value     int16
}

func (q *Queries) InsertVoteComment(ctx context.Context, arg InsertVoteCommentParams) error {
	_, err := q.db.Exec(ctx, insertVoteComment, arg.AccountID, arg.CommentID, arg.Value)
	return err
}

const insertVotePost = `-- name: InsertVotePost :exec
INSERT INTO votes (
    account_id, post_id, value
) VALUES (
  $1, $2, $3
)
`

type InsertVotePostParams struct {
	AccountID uuid.UUID
	PostID    pgtype.UUID
	Value     int16
}

func (q *Queries) InsertVotePost(ctx context.Context, arg InsertVotePostParams) error {
	_, err := q.db.Exec(ctx, insertVotePost, arg.AccountID, arg.PostID, arg.Value)
	return err
}

const insertVoteReply = `-- name: InsertVoteReply :exec
INSERT INTO votes (
    account_id, reply_id, value
) VALUES (
  $1, $2, $3
)
`

type InsertVoteReplyParams struct {
	AccountID uuid.UUID
	ReplyID   pgtype.UUID
	Value     int16
}

func (q *Queries) InsertVoteReply(ctx context.Context, arg InsertVoteReplyParams) error {
	_, err := q.db.Exec(ctx, insertVoteReply, arg.AccountID, arg.ReplyID, arg.Value)
	return err
}

const selectSumVotesByCommentID = `-- name: SelectSumVotesByCommentID :one
SELECT COALESCE(SUM(value), 0) FROM votes
WHERE comment_id = $1
`

func (q *Queries) SelectSumVotesByCommentID(ctx context.Context, commentID pgtype.UUID) (interface{}, error) {
	row := q.db.QueryRow(ctx, selectSumVotesByCommentID, commentID)
	var coalesce interface{}
	err := row.Scan(&coalesce)
	return coalesce, err
}

const selectSumVotesByPostID = `-- name: SelectSumVotesByPostID :one
SELECT COALESCE(SUM(value), 0) FROM votes
WHERE post_id = $1
`

func (q *Queries) SelectSumVotesByPostID(ctx context.Context, postID pgtype.UUID) (interface{}, error) {
	row := q.db.QueryRow(ctx, selectSumVotesByPostID, postID)
	var coalesce interface{}
	err := row.Scan(&coalesce)
	return coalesce, err
}

const selectSumVotesByReplyID = `-- name: SelectSumVotesByReplyID :one
SELECT COALESCE(SUM(value), 0) FROM votes
WHERE reply_id = $1
`

func (q *Queries) SelectSumVotesByReplyID(ctx context.Context, replyID pgtype.UUID) (interface{}, error) {
	row := q.db.QueryRow(ctx, selectSumVotesByReplyID, replyID)
	var coalesce interface{}
	err := row.Scan(&coalesce)
	return coalesce, err
}

const selectVoteByCommentID = `-- name: SelectVoteByCommentID :one
SELECT value FROM votes
WHERE account_id = $1 AND comment_id = $2
`

type SelectVoteByCommentIDParams struct {
	AccountID uuid.UUID
	CommentID pgtype.UUID
}

func (q *Queries) SelectVoteByCommentID(ctx context.Context, arg SelectVoteByCommentIDParams) (int16, error) {
	row := q.db.QueryRow(ctx, selectVoteByCommentID, arg.AccountID, arg.CommentID)
	var value int16
	err := row.Scan(&value)
	return value, err
}

const selectVoteByPostID = `-- name: SelectVoteByPostID :one
SELECT value FROM votes
WHERE account_id = $1 AND post_id = $2
`

type SelectVoteByPostIDParams struct {
	AccountID uuid.UUID
	PostID    pgtype.UUID
}

func (q *Queries) SelectVoteByPostID(ctx context.Context, arg SelectVoteByPostIDParams) (int16, error) {
	row := q.db.QueryRow(ctx, selectVoteByPostID, arg.AccountID, arg.PostID)
	var value int16
	err := row.Scan(&value)
	return value, err
}

const selectVoteByReplyID = `-- name: SelectVoteByReplyID :one
SELECT value FROM votes
WHERE account_id = $1 AND reply_id = $2
`

type SelectVoteByReplyIDParams struct {
	AccountID uuid.UUID
	ReplyID   pgtype.UUID
}

func (q *Queries) SelectVoteByReplyID(ctx context.Context, arg SelectVoteByReplyIDParams) (int16, error) {
	row := q.db.QueryRow(ctx, selectVoteByReplyID, arg.AccountID, arg.ReplyID)
	var value int16
	err := row.Scan(&value)
	return value, err
}

const updateVoteComment = `-- name: UpdateVoteComment :exec
UPDATE votes
SET value = $3
WHERE account_id = $1 AND comment_id = $2
`

type UpdateVoteCommentParams struct {
	AccountID uuid.UUID
	CommentID pgtype.UUID
	Value     int16
}

func (q *Queries) UpdateVoteComment(ctx context.Context, arg UpdateVoteCommentParams) error {
	_, err := q.db.Exec(ctx, updateVoteComment, arg.AccountID, arg.CommentID, arg.Value)
	return err
}

const updateVotePost = `-- name: UpdateVotePost :exec
UPDATE votes
SET value = $3
WHERE account_id = $1 AND post_id = $2
`

type UpdateVotePostParams struct {
	AccountID uuid.UUID
	PostID    pgtype.UUID
	Value     int16
}

func (q *Queries) UpdateVotePost(ctx context.Context, arg UpdateVotePostParams) error {
	_, err := q.db.Exec(ctx, updateVotePost, arg.AccountID, arg.PostID, arg.Value)
	return err
}

const updateVoteReply = `-- name: UpdateVoteReply :exec
UPDATE votes
SET value = $3
WHERE account_id = $1 AND reply_id = $2
`

type UpdateVoteReplyParams struct {
	AccountID uuid.UUID
	ReplyID   pgtype.UUID
	Value     int16
}

func (q *Queries) UpdateVoteReply(ctx context.Context, arg UpdateVoteReplyParams) error {
	_, err := q.db.Exec(ctx, updateVoteReply, arg.AccountID, arg.ReplyID, arg.Value)
	return err
}
