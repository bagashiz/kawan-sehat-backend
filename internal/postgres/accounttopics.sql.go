// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: accounttopics.sql

package postgres

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const deleteAccountTopic = `-- name: DeleteAccountTopic :execrows
DELETE FROM account_topics
WHERE account_id = $1 AND topic_id = $2
`

type DeleteAccountTopicParams struct {
	AccountID uuid.UUID
	TopicID   uuid.UUID
}

func (q *Queries) DeleteAccountTopic(ctx context.Context, arg DeleteAccountTopicParams) (int64, error) {
	result, err := q.db.Exec(ctx, deleteAccountTopic, arg.AccountID, arg.TopicID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const insertAccountTopic = `-- name: InsertAccountTopic :exec
INSERT INTO account_topics (
    account_id, topic_id, created_at
) VALUES ( 
  $1, $2, $3
)
`

type InsertAccountTopicParams struct {
	AccountID uuid.UUID
	TopicID   uuid.UUID
	CreatedAt time.Time
}

func (q *Queries) InsertAccountTopic(ctx context.Context, arg InsertAccountTopicParams) error {
	_, err := q.db.Exec(ctx, insertAccountTopic, arg.AccountID, arg.TopicID, arg.CreatedAt)
	return err
}

const selectTopicsByAccountID = `-- name: SelectTopicsByAccountID :many
SELECT t.id, t.name, t.slug, t.description, t.created_at, t.updated_at FROM topics t
JOIN account_topics at
ON t.id = at.topic_id
WHERE at.account_id = $1
`

func (q *Queries) SelectTopicsByAccountID(ctx context.Context, accountID uuid.UUID) ([]Topic, error) {
	rows, err := q.db.Query(ctx, selectTopicsByAccountID, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Topic{}
	for rows.Next() {
		var i Topic
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectTopicsByAccountIDPaginated = `-- name: SelectTopicsByAccountIDPaginated :many
SELECT t.id, t.name, t.slug, t.description, t.created_at, t.updated_at FROM topics t
JOIN account_topics at
ON t.id = at.topic_id
WHERE at.account_id = $1
LIMIT $2 OFFSET $3
`

type SelectTopicsByAccountIDPaginatedParams struct {
	AccountID uuid.UUID
	Limit     int32
	Offset    int32
}

func (q *Queries) SelectTopicsByAccountIDPaginated(ctx context.Context, arg SelectTopicsByAccountIDPaginatedParams) ([]Topic, error) {
	rows, err := q.db.Query(ctx, selectTopicsByAccountIDPaginated, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Topic{}
	for rows.Next() {
		var i Topic
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
