// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package postgres

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type AccountAvatar string

const (
	AccountAvatarNONE        AccountAvatar = "NONE"
	AccountAvatarOLDFEMALE   AccountAvatar = "OLD_FEMALE"
	AccountAvatarOLDMALE     AccountAvatar = "OLD_MALE"
	AccountAvatarYOUNGFEMALE AccountAvatar = "YOUNG_FEMALE"
	AccountAvatarYOUNGMALE   AccountAvatar = "YOUNG_MALE"
)

func (e *AccountAvatar) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccountAvatar(s)
	case string:
		*e = AccountAvatar(s)
	default:
		return fmt.Errorf("unsupported scan type for AccountAvatar: %T", src)
	}
	return nil
}

type NullAccountAvatar struct {
	AccountAvatar AccountAvatar
	Valid         bool // Valid is true if AccountAvatar is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccountAvatar) Scan(value interface{}) error {
	if value == nil {
		ns.AccountAvatar, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccountAvatar.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccountAvatar) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccountAvatar), nil
}

type AccountGender string

const (
	AccountGenderFEMALE      AccountGender = "FEMALE"
	AccountGenderMALE        AccountGender = "MALE"
	AccountGenderUNSPECIFIED AccountGender = "UNSPECIFIED"
)

func (e *AccountGender) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccountGender(s)
	case string:
		*e = AccountGender(s)
	default:
		return fmt.Errorf("unsupported scan type for AccountGender: %T", src)
	}
	return nil
}

type NullAccountGender struct {
	AccountGender AccountGender
	Valid         bool // Valid is true if AccountGender is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccountGender) Scan(value interface{}) error {
	if value == nil {
		ns.AccountGender, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccountGender.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccountGender) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccountGender), nil
}

type AccountRole string

const (
	AccountRolePATIENT AccountRole = "PATIENT"
	AccountRoleEXPERT  AccountRole = "EXPERT"
	AccountRoleADMIN   AccountRole = "ADMIN"
)

func (e *AccountRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccountRole(s)
	case string:
		*e = AccountRole(s)
	default:
		return fmt.Errorf("unsupported scan type for AccountRole: %T", src)
	}
	return nil
}

type NullAccountRole struct {
	AccountRole AccountRole
	Valid       bool // Valid is true if AccountRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccountRole) Scan(value interface{}) error {
	if value == nil {
		ns.AccountRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccountRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccountRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccountRole), nil
}

type Account struct {
	ID             uuid.UUID
	FullName       pgtype.Text
	Nik            pgtype.Text
	Username       string
	Email          string
	Password       string
	Gender         AccountGender
	Role           AccountRole
	Avatar         AccountAvatar
	IllnessHistory pgtype.Text
	CreatedAt      time.Time
	UpdatedAt      time.Time
}

type AccountTopic struct {
	AccountID uuid.UUID
	TopicID   uuid.UUID
	CreatedAt time.Time
}

type Bookmark struct {
	AccountID uuid.UUID
	PostID    uuid.UUID
	CreatedAt time.Time
}

type Comment struct {
	ID        uuid.UUID
	PostID    uuid.UUID
	AccountID uuid.UUID
	Content   string
	CreatedAt time.Time
}

type Post struct {
	ID        uuid.UUID
	AccountID uuid.UUID
	TopicID   uuid.UUID
	Title     string
	Content   string
	CreatedAt time.Time
	UpdatedAt time.Time
}

type Reply struct {
	ID        uuid.UUID
	CommentID uuid.UUID
	AccountID uuid.UUID
	Content   string
	CreatedAt time.Time
}

type Topic struct {
	ID          uuid.UUID
	Name        string
	Slug        string
	Description string
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

type Vote struct {
	ID        uuid.UUID
	AccountID uuid.UUID
	PostID    pgtype.UUID
	CommentID pgtype.UUID
	ReplyID   pgtype.UUID
	Value     int16
	CreatedAt time.Time
	UpdatedAt time.Time
}
