// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package postgres

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

type UserAvatar string

const (
	UserAvatarOldFemale   UserAvatar = "old_female"
	UserAvatarOldMale     UserAvatar = "old_male"
	UserAvatarYoungFemale UserAvatar = "young_female"
	UserAvatarYoungMale   UserAvatar = "young_male"
)

func (e *UserAvatar) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserAvatar(s)
	case string:
		*e = UserAvatar(s)
	default:
		return fmt.Errorf("unsupported scan type for UserAvatar: %T", src)
	}
	return nil
}

type NullUserAvatar struct {
	UserAvatar UserAvatar
	Valid      bool // Valid is true if UserAvatar is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserAvatar) Scan(value interface{}) error {
	if value == nil {
		ns.UserAvatar, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserAvatar.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserAvatar) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserAvatar), nil
}

type UserGender string

const (
	UserGenderFemale      UserGender = "female"
	UserGenderMale        UserGender = "male"
	UserGenderUnspecified UserGender = "unspecified"
)

func (e *UserGender) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserGender(s)
	case string:
		*e = UserGender(s)
	default:
		return fmt.Errorf("unsupported scan type for UserGender: %T", src)
	}
	return nil
}

type NullUserGender struct {
	UserGender UserGender
	Valid      bool // Valid is true if UserGender is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserGender) Scan(value interface{}) error {
	if value == nil {
		ns.UserGender, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserGender.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserGender) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserGender), nil
}

type UserRole string

const (
	UserRolePatient UserRole = "patient"
	UserRoleExpert  UserRole = "expert"
	UserRoleAdmin   UserRole = "admin"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole
	Valid    bool // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type User struct {
	ID             int64
	Name           string
	Nik            string
	Email          string
	Password       string
	Gender         UserGender
	Role           UserRole
	Avatar         NullUserAvatar
	IllnessHistory pgtype.Text
	CreatedAt      time.Time
	UpdatedAt      time.Time
}
