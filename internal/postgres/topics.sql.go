// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: topics.sql

package postgres

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countTopics = `-- name: CountTopics :one
SELECT COUNT(id) FROM topics
`

func (q *Queries) CountTopics(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countTopics)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteTopic = `-- name: DeleteTopic :execrows
DELETE FROM topics
WHERE id = $1
`

func (q *Queries) DeleteTopic(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.Exec(ctx, deleteTopic, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const insertTopic = `-- name: InsertTopic :exec
INSERT INTO topics (
    id, name, slug, description, created_at, updated_at
) VALUES ( 
  $1, $2, $3, $4, $5, $6
)
`

type InsertTopicParams struct {
	ID          uuid.UUID
	Name        string
	Slug        string
	Description string
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) InsertTopic(ctx context.Context, arg InsertTopicParams) error {
	_, err := q.db.Exec(ctx, insertTopic,
		arg.ID,
		arg.Name,
		arg.Slug,
		arg.Description,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const selectAllTopics = `-- name: SelectAllTopics :many
SELECT id, name, slug, description, created_at, updated_at FROM topics
ORDER BY name
`

func (q *Queries) SelectAllTopics(ctx context.Context) ([]Topic, error) {
	rows, err := q.db.Query(ctx, selectAllTopics)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Topic{}
	for rows.Next() {
		var i Topic
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectAllTopicsPaginated = `-- name: SelectAllTopicsPaginated :many
SELECT id, name, slug, description, created_at, updated_at FROM topics
ORDER BY name
LIMIT $1
OFFSET $2
`

type SelectAllTopicsPaginatedParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) SelectAllTopicsPaginated(ctx context.Context, arg SelectAllTopicsPaginatedParams) ([]Topic, error) {
	rows, err := q.db.Query(ctx, selectAllTopicsPaginated, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Topic{}
	for rows.Next() {
		var i Topic
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectTopicByID = `-- name: SelectTopicByID :one
SELECT id, name, slug, description, created_at, updated_at FROM topics
WHERE id = $1
LIMIT 1
`

func (q *Queries) SelectTopicByID(ctx context.Context, id uuid.UUID) (Topic, error) {
	row := q.db.QueryRow(ctx, selectTopicByID, id)
	var i Topic
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTopic = `-- name: UpdateTopic :exec
UPDATE topics
SET
  name = COALESCE($2, name),
  slug = COALESCE($3, slug),
  description = COALESCE($4, description),
  updated_at = $5
WHERE id = $1
`

type UpdateTopicParams struct {
	ID          uuid.UUID
	Name        pgtype.Text
	Slug        pgtype.Text
	Description pgtype.Text
	UpdatedAt   time.Time
}

func (q *Queries) UpdateTopic(ctx context.Context, arg UpdateTopicParams) error {
	_, err := q.db.Exec(ctx, updateTopic,
		arg.ID,
		arg.Name,
		arg.Slug,
		arg.Description,
		arg.UpdatedAt,
	)
	return err
}
